create database movie_rating;
use movie_rating;

create table actor(
act_id int primary key ,
act_name varchar(30),
act_role varchar(30)
);

create table movie(
mov_id int primary key,
mov_name varchar(40),
mov_lang varchar(10),
mov_len time,
mov_dt_rel year,
mov_type varchar(15),
act_id int,
dir_id int,
constraint fk_a foreign key(act_id) references actor(act_id),
constraint fk_d foreign key(dir_id) references director(dir_id)
);

create table director(
dir_id int primary key,
dir_name varchar(30)
);

create table rating(
rat_id int primary key,
rat_star decimal(2,2),
rat_of_mov decimal(4,2),
mov_id int,
constraint fk_m foreign key(mov_id) references movie(mov_id)
);

insert into actor values(1,"Ajith Kumar","Hero"),
(2,"vijay","Hero"),
(3,"Kamal haasan","Hero"),
(4,"Rajini Kanth","Hero"),
(5,"Dhanush","Hero"),
(6,"Goundamani","Comedian"),
(7,"senthil","Comedian"),
(8,"Vivek","Comedian"),
(9,"Vadivelu","Comedian"),
(10,"Santhanam","Comedian"),
(11,"Vikram","Hero"),
(12,"Surya","Hero"),
(13,"Simbu","Hero"),
(14,"Jeyam Ravi","Hero"),
(15,"Atharvaa","Hero"),
(16,"Siva KarthiKeyan","Hero"),
(17,"Karthi","Hero"),
(18,"Vishal","Hero");

insert into director values(1,"Mani Ratnam"),
(2,"S.Shankar"),
(3,"Gautham Vasudev Menon"),
(4,"Vetrimaaran"),
(5,"K.S.Ravikumar"),
(6,"Venkat Prabhu"),
(7,"Nelson Dilipkumar"),
(8,"Lokesh Kanagaraj"),
(9,"Visu"),
(10,"Sunder c"),
(11,"Hari");


insert into movie values(1,"Mankatha","2:29:00",2011,"Action",1,6),
(2,"Nanban","3:08:29",2012,"Comedy",2,2),
(3,"Jailer","2:49:50",2023,"Action",4,7),
(4,"Nayakan","2:01:34",1987,"Crime",3,1),
(5,"Enthiran","2:50:29",2010,"Sci-fi",4,2),
(6,"Thalapathi","2:37:10",1991,"Action",4,1),
(7,"Vettaiyaadu Vilaiyaadu","2:30:40",2006,"Thriller",3,3),
(8,"Vada Chennai","2:44:50",2018,"Thriller",5,4),
(9,"Aasai","2:25:40",1995,"Romance",1,1),
(10,"I","3:08:04",2015,"Action",11,2),
(11,"Vinnaithaandi Varuvaayaa","2:37:10",2010,"Romance",13,3),
(12,"Eetti","2:14:40",2015,"Sport",15,4),
(13,"Vaaranam Aayiram","2:43:50",2008,"Romance",12,3),
(14,"Avvai Shanmugi","2:41:47",1996,"Comedy",3,5),
(15,"sivakasi","3:00:00",2005,"Action",2,6),
(16,"Polladhavan","2:30:40",2007,"Action",5,4),
(17,"Muthu","2:12:30",1995,"Action",4,5),
(18,"Maanaadu","2:27:30",2021,"Sci-fi",13,6),
(19,"comali","2:21:40",2019,"Comedy",14,5),
(20,"Doctor","2:30:30",2021,"Comedy",16,7),
(21,"Kaithi","2:26:35",2019,"Action",17,8),
(22,"Gentleman","2:35:10",1993,"Action",6,2),
(23,"jailer","2:49:40",2023,"Action",4,7),
(24,"Nattamai","2:33:40",1994,"Family",7,5),
(25,"Vikram","2:54:30",2023,"Action",3,8),
(26,"Aambala","2:00:00",2015,"Comedy",18,10),
(27,"Alex Pandian","2:15:00",2013,"Action",17,9),
(28,"Saamy","2:20:40",2003,"Action",11,11),
(29,"Aranmanai","2:41:45",2014,"Horror",10,10),
(30,"Middle class madhavan","2:31:07",2001,"Comedy",9,9),
(31,"Singam","2:23:00",2010,"Action",12,11),
(32,"Sandai","2:37:54",2008,"Action",8,10),
(33,"Matha Gaja Raja","2:26:00",2025,"Comedy",18,10),
(34,"Singam","2:23:00",2010,"Action",8,11),
(35,"Matha Gaja Raja","2:26:00",2025,"Comedy",10,10),
(36,"Alex Pandian","2:15:00",2013,"Action",10,9);

insert into rating values
(1,4,7.7,1),
(2,4,7.8,2),
(3,3.5,7.1,3),
(4,4.2,8.6,4),
(5,3.1,7.2,5),
(6,4,8.5,6),
(7,4,7.9,7),
(8,4,8.4,8),
(9,4,7.5,9),
(10,3.2,7.4,10),
(11,4,8.1,11),
(12,3,6.3,12),
(13,4,8.2,13),
(14,4,7.9,14),
(15,3,5.8,15),
(16,4,7.7,16),
(17,4,7.5,17),
(18,4,8.2,18),
(19,3.2,6.9,19),
(20,3.1,7.4,20),
(21,4,8.4,21),
(22,4,7.8,22),
(23,3.1,7.1,23),
(24,3.2,6.9,24),
(25,4,8.3,25),
(26,2.5,4.8,26),
(27,1.9,2.9,27),
(28,3.6,7.3,28),
(29,2.8,5.3,29),
(30,3,6.4,30),
(31,3.4,6.9,31),
(32,3,5.8,32),
(33,3,5.7,33),
(34,3.4,6.9,34),
(35,3,5.7,35),
(36,1.9,2.9,36);



-- Question-1
--  View for Highest Rated Movies by Genre

create view Highest_Rated_Movie as
select mov_type, mov_name,rat_of_mov
from movie m join rating r using(mov_id)
where r.rat_of_mov = (
select max(r2.rat_of_mov)
from rating r2 join movie m2 using(mov_id)
where m2.mov_type = m.mov_type
);

select * from Highest_Rated_Movie;

------------------------------------------------------
-- Question 2 

-- To find which actor has the highest average movie rating, 
-- while ensuring that the actor has acted in more than one movie

delimiter //
create procedure Actor_HighRated_movie(out Actor_Name varchar(30),out Average_Rating decimal(4,2))
begin
select act_name , round(avg(r.rat_of_mov),2) into Actor_name,Average_Rating
from actor a join movie m using(act_id)
join rating r using(mov_id)
group by a.act_name,r.rat_of_mov
having count(m.mov_name)>1
order by Average_Rating desc 
limit 1;
end //
delimiter ;

call Actor_HighRated_movie(@Actor_Name,@Average_Rating);

-- To get The Output From Store Procedure
select @Actor_Name,@Average_Rating;


-----------------------------------------------------------
-- Question 3

-- List all actors who have acted in at least two movies with a rating above 7
-- Store Procedure in getting from user 

delimiter //
create procedure Actor_Act_Movie_Rating(in rating decimal(4,2))
begin
select a.act_name , count(m.mov_id)
from actor a join movie m using(act_id)
join rating r using(mov_id)
where r.rat_of_mov > rating
group by a.act_name
having count(m.mov_id)>=2;
end //
delimiter ;

-- using Variable to assign value 
set @rat =7.3;

call Actor_Act_Movie_Rating(@rat);

 
 ----------------------------------------------------------
 -- Question 4

-- Find the top 3 highest-rated movies along with their director and actor.
 -- Retrieve the movie name, director name, lead actor name, and the rating.
delimiter //
create procedure Top_Three_HighRated_movie()
begin
select act_name, mov_name, dir_name,rat_of_mov
 from actor join movie using(act_id)
 join director using(dir_id)
 join rating using(mov_id)
 order by rat_of_mov desc
 limit 3;
 end //
 delimiter ;

-- To Call The Top_Three_HighRated_movie 
call Top_Three_HighRated_movie();


